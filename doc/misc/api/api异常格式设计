API设计的两端
===================

    api设计一般是在服务端做，但必须考虑各种与之交互的客户端client。各种客户端的存在让我们不得不考虑使用通用格式传递数据
    比如xml json cvs 二进制等。。

    当前一个趋势是json 已经逐渐替代了xml这个重量级的通讯格式而成为新一代数据交互首选方案。（javascript也通过nodeJs ，
    couchDB,mongodb 等新兴技术重赢人们的眼球，在浏览器端的各种mvc mvvm 等js框架更加使得js呈现百家争荣的景象）

客户端异常设计
-------------------
    client 和 server 是通讯的两个端点。交互时不可避免出现失败情况，原因可能是双方中的任何一方导致。这时候如何告诉api使用
    者到底发生了什么情况？ 异常是一种好手段。
    关于异常可以参考mongodb的[php驱动实现](http://www.php.net/manual/en/mongo.exceptions.php)。

    设计异常时首先设计自己的根异常 MyClientNameException . 然后根据原因和应用场景扩展这个“根”；

     另外异常的常用字段：code(错误码)  message(错误消息) reason（可能的原因或者确定的原因）。这些字段需要在server端定义
     仅仅通过json格式传递到客户端显示即可 当然client端也可以有一些自己的定义。

服务端对client的异常
-----------------------
    可分技术性质的异常 和业务性质。前者是通用的，而后者可以根据特定业务场景抛不同的异常。这种情况对客户端来说要统一。
    比如保留多少位作为通用异常码  后多少位可以作为自定义异常（比如套接字的端口保留思想）。
    另一种是业务异常仍属于系统通用异常的范畴但添加了自己的异常码、消息，原因。可以起名如：（bizCode,bizMessage,biz...）
    感觉有点傻！


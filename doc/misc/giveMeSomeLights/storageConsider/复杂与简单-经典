复杂与简单
============

> 来自 http://ittechnical.sinaapp.com/node-js-and-hbase/

题外讨论：《复杂与简单》
我们前面多次提到Thrift，Thrift是由Facebook开源的一个RPC框架，用来进行可扩展且跨语言的服务的开发，使得各种编程语言间无缝结合的、高效的服务。我们依据Thrift的规范简单定义访问接口，通过Thrift编译器编译生成各种编程语言代码，实现各种语言模块之间的高效互访问，速度比Google的Protocol Buffers还要快。Thrift可以说它是现在最优秀的分布式通信机制，实现了在大型分布式集群中各独立模块之间的高效协同。

掌握如此强大的Thrift却是一件轻松愉悦的事。在它的{官网}阅读相应的例程和文档，以你的学习能力，几个小时就可以熟悉掌握，并相应的设计和编程。如果你继续钻研，一两天之内就可以达到专家水平。在20世纪90年代出现的CORBA，也是一个RPC框架。在当时它也是最优秀的分布式通信机制之一，比起微软的DCOM有很多优势。即使这样，CORBA却过于复杂，要熟悉CORBA，并进行相应的设计和编程，需要许多个月来掌握，而要达到专家水平，则需要好几年。

回过头我们来看，从CORBA到Thrift的发展过程，是一个从复杂到简单的演进过程。这个过程是普遍性的。由于技术需求的驱动，首先，人们将简单的东西组合、拼接、堆砌和改良，实现更丰富的功能，满足发展中的需求；接下来随着进一步需求的出现，人们会发现用这些东西来满足需求变得越来越复杂，人们就会把以前的各种组合、拼接、堆砌和改良系统性地整合起来，形成一个内部复杂而表面简单的东西。人们再拿这些简单的东西去组合、拼接、堆砌和改良一个更加丰富的世界。

随着数据量和访问量的增长，每一个以(PHP+MySQL+Memcached)为构架的神奇的网站，都会从单台DB，发展到主从复制，再到垂直分区，最后到水平分区。原理貌似很简单，但是真正做起来，却是一个极其痛苦的过程。

1: PHP + MySQL
2: PHP + MySQL (Master + Slaves)
3: PHP + MySQL (Master + Slaves) + Memcached (Middleware)
4: PHP + MySQL (Sharding + Master + Slaves) + Memcached (Middleware)
5: PHP + MySQL (Sharding + Master + Slaves) + Memcached (Middleware) + NoSQL

我们在第一章中讨论了《Web开发的复杂性》。其实每一个技术领域都是如此，都可以套用下面这段描述。“如果你知道XXXX的话，根本没那么简单。你只是XX，所有这些都是通过XX，都经过X1，X2，X3，X4……的处理。实际上背后的技术异常复杂，以至于任何工程师多想一点的话都会眼花缭乱，以至于没有任何一家公司可以单独应对整个问题的复杂性。”

没有任何方法能够阻止复杂性的增长，但我们可以实践下面两条规则减缓复杂性的发生：

正交性：每一个动作（无论是API调用，宏调用或者语言运算）只改变一件事情，不会影响其他。正交性教给我们：做，并且只做好一件事情。
组合性：要编写复杂软件又不至于一败涂地的唯一方法，就是用定义清晰的接口把若干简单的模块组合起来。要追求代码的透明，最有效的方法很简单，不要在具体操作的代码上叠放太多的抽象层。

借用尼采的一句话，一切美好的事物都是曲折地接近自己的目标，一切笔直都是骗人的，所有真理都是弯曲的，时间本身就是一个圆圈。我们只能在细节中追求复杂的精致，在系统中追求简单的完整。